################################################################################
# These computations are based off of Bernd Schober's notes for chart 61 in 
# June 2019.  Currently, Singular does not produce an intersection lattice for 
# charts whose ambient space is not affine. 
#                                                           Maglione, June 2019
################################################################################

import Zeta
from sage.all import QQ, Polyhedron, PolynomialRing, var
from SingularZeta.src.globalVars import _DEFAULT_p, _DEFAULT_t

p = var(_DEFAULT_p)
t = var(_DEFAULT_t)

# ==============================================================================
# Chart 61:
# ==============================================================================
# ------------------------------------------------------------------------------
# Case: 1.1
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1),
                     ( 0,-1, 2, 0, 0, 0, 0),
                     ( 0,-1, 1, 1, 0, 0, 0),
                     ( 0, 0,-1, 2, 0, 0, 0),
                     ( 0,-1, 0, 2, 0, 0, 0)])
R = PolynomialRing(QQ,'x', 6)
sm_11 = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_11 = (1 - p**-1)**-3*(1 - p**-1)**6*(p - 2)**2*p**-2*t
zed_11 = sm_11.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-1, x4=t, x5=p**-1)
int_11 = factor_11*zed_11
# Double checked 

# ------------------------------------------------------------------------------
# Case: 1.2
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1),
                     ( 0,-1, 2, 0, 0, 0, 0),
                     ( 0,-1, 1, 1, 0, 0, 0),
                     ( 1, 0,-1, 2, 0, 0, 1),
                     ( 0,-1, 0, 2, 0, 0, 0)])
R = PolynomialRing(QQ,'x', 6)
sm_12 = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_12 = (1 - p**-1)**-3*(1 - p**-1)**6*(p - 2)*p**-2*t
zed_12 = sm_12.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-1, x4=t, x5=p**-1)
int_12 = factor_12*zed_12
# Double checked

# ------------------------------------------------------------------------------
# Case: 1.3
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1),
                     ( 0,-1, 2, 0, 0, 0, 0),
                     ( 1,-1, 1, 1, 1, 0, 0),
                     ( 1, 0,-1, 2, 1, 0, 0),
                     ( 1,-1, 0, 2, 1, 0, 0)])
R = PolynomialRing(QQ,'x', 6)
sm_13 = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_13 = (1 - p**-1)**-3*(1 - p**-1)**6*(p - 2)*p**-3*t
zed_13 = sm_13.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-2, x4=t, x5=p**-1)
int_13 = factor_13*zed_13
# Double checked

# ------------------------------------------------------------------------------
# Case: 1.4
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1),
                     ( 0,-1, 2, 0, 0, 0, 0),
                     ( 1,-1, 1, 1, 1, 0, 0),
                     ( 2, 0,-1, 2, 1, 0, 1),
                     ( 1,-1, 0, 2, 1, 0, 0)])
R = PolynomialRing(QQ,'x', 6)
sm_14 = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_14 = (1 - p**-1)**-3*(1 - p**-1)**6*p**-3*t
zed_14 = sm_14.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-2, x4=t, x5=p**-1)
int_14 = factor_14*zed_14
# Double checked

# ------------------------------------------------------------------------------
# Case: 2.plus
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1),
                     ( 0,-1, 2, 0, 0, 0, 0),
                     ( 0,-1, 1, 1, 1, 0, 0),
                     ( 0, 0,-1, 2, 1, 0, 0),
                     ( 1,-1, 0, 2, 1, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_2p = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_2p = (1 - p**-1)**-3*(1 - p**-1)**6*p**-1*t
zed_2p = sm_2p.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-2, x4=t, x5=p**-1)
int_2p = factor_2p*zed_2p
# Double checked

# ------------------------------------------------------------------------------
# Case: 2.minus
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1),
                     ( 0,-1, 2, 0, 0, 0, 0),
                     ( 0,-1, 1, 1, 0, 0, 0),
                     ( 0, 0,-1, 2, 0, 0, 0),
                     ( 1,-1, 0, 2, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_2m = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_2m = (1 - p**-1)**-3*(1 - p**-1)**6*p**-2*t
zed_2m = sm_2m.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-1, x4=t, x5=p**-1)
int_2m = factor_2m*zed_2m
# Double checked

# ------------------------------------------------------------------------------
# Case: 2.1.
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1),
                     ( 0,-1, 2, 0, 0, 0, 0),
                     ( 0,-1, 1, 1, 0, 0, 0),
                     ( 0, 0,-1, 2, 0, 0, 0),
                     ( 1,-1, 0, 2, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_21 = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_21 = (1 - p**-1)**-3*(p - 2)*(1 - p**-1)**6*p*t*p**-3
zed_21 = sm_21.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-1, x4=t, x5=p**-1)
int_21 = factor_21*zed_21
# Double checked

# ------------------------------------------------------------------------------
# Case: 2.2.
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1),
                     ( 0,-1, 2, 0, 0, 0, 0),
                     ( 1,-1, 1, 1, 1, 0, 0),
                     ( 1, 0,-1, 2, 1, 0, 0),
                     ( 2,-1, 0, 2, 1, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_22 = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_22 = (1 - p**-1)**-3*(1 - p**-1)**6*t*p**-3
zed_22 = sm_22.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-2, x4=t, x5=p**-1)
int_22 = factor_22*zed_22
# Double checked

int_61 = (int_11 + int_12 + int_13 + int_14 + int_2p - int_2m).simplify().factor().simplify()

assert int_61 - (int_11 + int_12 + int_13 + int_14 + int_21 + int_22) == 0




################################################################################
# No cone conditions
################################################################################
# ==============================================================================
# Chart 61:
# ==============================================================================
# ------------------------------------------------------------------------------
# Case: 1.1
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_11_cc = Zeta.smurf.SMURF.from_polyhedron(P, R)
zed_11_cc = sm_11_cc.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-1, x4=t, x5=p**-1)
int_11_cc = factor_11*zed_11_cc

# ------------------------------------------------------------------------------
# Case: 1.2
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_12_cc = Zeta.smurf.SMURF.from_polyhedron(P, R)
zed_12_cc = sm_12_cc.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-1, x4=t, x5=p**-1)
int_12_cc = factor_12*zed_12_cc

# ------------------------------------------------------------------------------
# Case: 1.3
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_13_cc = Zeta.smurf.SMURF.from_polyhedron(P, R)
zed_13_cc = sm_13_cc.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-2, x4=t, x5=p**-1)
int_13_cc = factor_13*zed_13_cc

# ------------------------------------------------------------------------------
# Case: 1.4
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_14_cc = Zeta.smurf.SMURF.from_polyhedron(P, R)
zed_14_cc = sm_14_cc.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-2, x4=t, x5=p**-1)
int_14_cc = factor_14*zed_14_cc

# ------------------------------------------------------------------------------
# Case: 2.plus
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_2p_cc = Zeta.smurf.SMURF.from_polyhedron(P, R)
zed_2p_cc = sm_2p_cc.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-2, x4=t, x5=p**-1)
int_2p_cc = factor_2p*zed_2p_cc

# ------------------------------------------------------------------------------
# Case: 2.minus
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_2m_cc = Zeta.smurf.SMURF.from_polyhedron(P, R)
zed_2m_cc = sm_2m_cc.evaluate()(x0=p**2*t, x1=t, x2=p**-2*t, x3=p**-1, x4=t, x5=p**-1)
int_2m_cc = factor_2m*zed_2m_cc

int_61_cc = (int_11_cc + int_12_cc + int_13_cc + int_14_cc + int_2p_cc - int_2m_cc).simplify().factor().simplify()



################################################################################
# No cone conditions and no integrand
################################################################################
# ==============================================================================
# Chart 61:
# ==============================================================================
# ------------------------------------------------------------------------------
# Case: 1.1
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_11_null = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_11_null = (1 - p**-1)**6*(p - 2)**2*p**-1*p**-3
zed_11_null = sm_11_null.evaluate()(x0=p**-1, x1=p**-2, x2=p**-3, x3=p**-1, x4=p**-2, x5=p**-1)
int_11_null = factor_11_null*zed_11_null

# ------------------------------------------------------------------------------
# Case: 1.2
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_12_null = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_12_null = (1 - p**-1)**6*(p - 2)*p**-1*p**-3
zed_12_null = sm_12_null.evaluate()(x0=p**-1, x1=p**-2, x2=p**-3, x3=p**-1, x4=p**-2, x5=p**-1)
int_12_null = factor_12_null*zed_12_null

# ------------------------------------------------------------------------------
# Case: 1.3
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_13_null = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_13_null = (1 - p**-1)**6*(p - 2)*p**-2*p**-3
zed_13_null = sm_13_null.evaluate()(x0=p**-1, x1=p**-2, x2=p**-3, x3=p**-2, x4=p**-2, x5=p**-1)
int_13_null = factor_13_null*zed_13_null

# ------------------------------------------------------------------------------
# Case: 1.4
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_14_null = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_14_null = (1 - p**-1)**6*p**-2*p**-3
zed_14_null = sm_14_null.evaluate()(x0=p**-1, x1=p**-2, x2=p**-3, x3=p**-2, x4=p**-2, x5=p**-1)
int_14_null = factor_14_null*zed_14_null

# ------------------------------------------------------------------------------
# Case: 2.1.
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_21_null = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_21_null = (p - 2)*(1 - p**-1)**6*p**-1*p**-3
zed_21_null = sm_21_null.evaluate()(x0=p**-1, x1=p**-2, x2=p**-3, x3=p**-1, x4=p**-2, x5=p**-1)
int_21_null = factor_21_null*zed_21_null

# ------------------------------------------------------------------------------
# Case: 2.2.
# ------------------------------------------------------------------------------
#                      b n1 n2 n3 n4 n5 n6
P = Polyhedron(ieqs=[( 0, 1, 0, 0, 0, 0, 0),
                     ( 0, 0, 1, 0, 0, 0, 0),
                     ( 0, 0, 0, 1, 0, 0, 0),
                     ( 0, 0, 0, 0, 1, 0, 0),
                     ( 0, 0, 0, 0, 0, 1, 0),
                     ( 0, 0, 0, 0, 0, 0, 1)])
R = PolynomialRing(QQ,'x', 6)
sm_22_null = Zeta.smurf.SMURF.from_polyhedron(P, R)
factor_22_null = (1 - p**-1)**6*p**-2*p**-3
zed_22_null = sm_22_null.evaluate()(x0=p**-1, x1=p**-2, x2=p**-3, x3=p**-2, x4=p**-2, x5=p**-1)
int_22_null = factor_22_null*zed_22_null


int_61_null = (int_11_null + int_12_null + int_13_null + int_14_null + int_21_null + int_22_null).simplify().factor().simplify()
